// Code generated by go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	service "github.com/go-nacelle/service"
	"sync"
)

// MockServiceContainer is a mock implementation of the ServiceContainer
// interface (from the package github.com/go-nacelle/service) used for unit
// testing.
type MockServiceContainer struct {
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *ServiceContainerGetFunc
	// InjectFunc is an instance of a mock function object controlling the
	// behavior of the method Inject.
	InjectFunc *ServiceContainerInjectFunc
	// SetFunc is an instance of a mock function object controlling the
	// behavior of the method Set.
	SetFunc *ServiceContainerSetFunc
}

// NewMockServiceContainer creates a new mock of the ServiceContainer
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockServiceContainer() *MockServiceContainer {
	return &MockServiceContainer{
		GetFunc: &ServiceContainerGetFunc{
			defaultHook: func(interface{}) (interface{}, error) {
				return nil, nil
			},
		},
		InjectFunc: &ServiceContainerInjectFunc{
			defaultHook: func(interface{}) error {
				return nil
			},
		},
		SetFunc: &ServiceContainerSetFunc{
			defaultHook: func(interface{}, interface{}) error {
				return nil
			},
		},
	}
}

// NewMockServiceContainerFrom creates a new mock of the
// MockServiceContainer interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockServiceContainerFrom(i service.ServiceContainer) *MockServiceContainer {
	return &MockServiceContainer{
		GetFunc: &ServiceContainerGetFunc{
			defaultHook: i.Get,
		},
		InjectFunc: &ServiceContainerInjectFunc{
			defaultHook: i.Inject,
		},
		SetFunc: &ServiceContainerSetFunc{
			defaultHook: i.Set,
		},
	}
}

// ServiceContainerGetFunc describes the behavior when the Get method of the
// parent MockServiceContainer instance is invoked.
type ServiceContainerGetFunc struct {
	defaultHook func(interface{}) (interface{}, error)
	hooks       []func(interface{}) (interface{}, error)
	history     []ServiceContainerGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockServiceContainer) Get(v0 interface{}) (interface{}, error) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(ServiceContainerGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockServiceContainer instance is invoked and the hook queue is
// empty.
func (f *ServiceContainerGetFunc) SetDefaultHook(hook func(interface{}) (interface{}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockServiceContainer instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceContainerGetFunc) PushHook(hook func(interface{}) (interface{}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ServiceContainerGetFunc) SetDefaultReturn(r0 interface{}, r1 error) {
	f.SetDefaultHook(func(interface{}) (interface{}, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ServiceContainerGetFunc) PushReturn(r0 interface{}, r1 error) {
	f.PushHook(func(interface{}) (interface{}, error) {
		return r0, r1
	})
}

func (f *ServiceContainerGetFunc) nextHook() func(interface{}) (interface{}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceContainerGetFunc) appendCall(r0 ServiceContainerGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceContainerGetFuncCall objects
// describing the invocations of this function.
func (f *ServiceContainerGetFunc) History() []ServiceContainerGetFuncCall {
	f.mutex.Lock()
	history := make([]ServiceContainerGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceContainerGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockServiceContainer.
type ServiceContainerGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interface{}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceContainerGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceContainerGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ServiceContainerInjectFunc describes the behavior when the Inject method
// of the parent MockServiceContainer instance is invoked.
type ServiceContainerInjectFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []ServiceContainerInjectFuncCall
	mutex       sync.Mutex
}

// Inject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockServiceContainer) Inject(v0 interface{}) error {
	r0 := m.InjectFunc.nextHook()(v0)
	m.InjectFunc.appendCall(ServiceContainerInjectFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Inject method of the
// parent MockServiceContainer instance is invoked and the hook queue is
// empty.
func (f *ServiceContainerInjectFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Inject method of the parent MockServiceContainer instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ServiceContainerInjectFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ServiceContainerInjectFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ServiceContainerInjectFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *ServiceContainerInjectFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceContainerInjectFunc) appendCall(r0 ServiceContainerInjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceContainerInjectFuncCall objects
// describing the invocations of this function.
func (f *ServiceContainerInjectFunc) History() []ServiceContainerInjectFuncCall {
	f.mutex.Lock()
	history := make([]ServiceContainerInjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceContainerInjectFuncCall is an object that describes an invocation
// of method Inject on an instance of MockServiceContainer.
type ServiceContainerInjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceContainerInjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceContainerInjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ServiceContainerSetFunc describes the behavior when the Set method of the
// parent MockServiceContainer instance is invoked.
type ServiceContainerSetFunc struct {
	defaultHook func(interface{}, interface{}) error
	hooks       []func(interface{}, interface{}) error
	history     []ServiceContainerSetFuncCall
	mutex       sync.Mutex
}

// Set delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockServiceContainer) Set(v0 interface{}, v1 interface{}) error {
	r0 := m.SetFunc.nextHook()(v0, v1)
	m.SetFunc.appendCall(ServiceContainerSetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Set method of the
// parent MockServiceContainer instance is invoked and the hook queue is
// empty.
func (f *ServiceContainerSetFunc) SetDefaultHook(hook func(interface{}, interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Set method of the parent MockServiceContainer instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceContainerSetFunc) PushHook(hook func(interface{}, interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ServiceContainerSetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}, interface{}) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ServiceContainerSetFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}, interface{}) error {
		return r0
	})
}

func (f *ServiceContainerSetFunc) nextHook() func(interface{}, interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceContainerSetFunc) appendCall(r0 ServiceContainerSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceContainerSetFuncCall objects
// describing the invocations of this function.
func (f *ServiceContainerSetFunc) History() []ServiceContainerSetFuncCall {
	f.mutex.Lock()
	history := make([]ServiceContainerSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceContainerSetFuncCall is an object that describes an invocation of
// method Set on an instance of MockServiceContainer.
type ServiceContainerSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceContainerSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceContainerSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
